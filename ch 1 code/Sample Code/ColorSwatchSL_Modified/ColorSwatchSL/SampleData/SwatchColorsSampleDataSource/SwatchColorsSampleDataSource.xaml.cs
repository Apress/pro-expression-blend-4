//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SwatchColorsSampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class Swatches { }
#else

	public class Swatches : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public Swatches()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/ColorSwatchSL;component/SampleData/SwatchColorsSampleDataSource/SwatchColorsSampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception )
			{ }
		}

		private SwatchCollection _SwatchCollection = new SwatchCollection();
		public SwatchCollection SwatchCollection
		{
			get
			{
				return this._SwatchCollection;
			}
		}
	}

	public class Swatch : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Theme = string.Empty;
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if (this._Theme != value)
				{
					this._Theme = value;
					this.OnPropertyChanged("Theme");
				}
			}
		}

		private string _Color1 = string.Empty;
		public string Color1
		{
			get
			{
				return this._Color1;
			}
			set
			{
				if (this._Color1 != value)
				{
					this._Color1 = value;
					this.OnPropertyChanged("Color1");
				}
			}
		}

		private string _Color2 = string.Empty;
		public string Color2
		{
			get
			{
				return this._Color2;
			}
			set
			{
				if (this._Color2 != value)
				{
					this._Color2 = value;
					this.OnPropertyChanged("Color2");
				}
			}
		}

		private string _Color3 = string.Empty;
		public string Color3
		{
			get
			{
				return this._Color3;
			}
			set
			{
				if (this._Color3 != value)
				{
					this._Color3 = value;
					this.OnPropertyChanged("Color3");
				}
			}
		}
	}

	public class SwatchCollection : System.Collections.ObjectModel.ObservableCollection<Swatch>
	{ }
#endif
}
